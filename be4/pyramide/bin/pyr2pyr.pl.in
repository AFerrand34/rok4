#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière
#
# Géoportail SAV <geop_services@geoportail.fr>
#
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière
#
# Géoportail SAV <geop_services@geoportail.fr>
#
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
#
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: pyr2pyr.pl

Section: pyr2pyr tool

Synopsis:
    (start code)
    pyr2pyr.pl --conf file.txt
    (end code)

This tool allow to convert a file ROK4 pyramid into a ceph stored ROK4 pyramid. We can keep the slab storage (tile) or store seperated tiles.

(see pyr2pyr_general.png)

=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

# Module
use Log::Log4perl qw(:easy);
use Getopt::Long;
use File::Basename;
use File::Path;
use Cwd;
use Data::Dumper;


# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My home-made modules
use COMMON::Base36;
use XML::LibXML;
use PYR2PYR::PropertiesLoader;

################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

################################################################################
# Version
my $VERSION = '@VERSION_TEXT@';


my %options =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,

    # Mandatory
    "conf"  => undef,
);

=begin nd
Variable: this

All parameters by section :

=cut
my %this =
(
    params => undef
);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <doIt>
=cut
sub main {
    print STDOUT "BEGIN\n";

    # initialization
    ALWAYS("> Initialization");
    if (! main::init()) {
        print STDERR "ERROR INITIALIZATION !\n";
        exit 1;
    }

    # configuration
    ALWAYS("> Configuration");
    if (! main::config()) {
        my $message = "ERROR CONFIGURATION !";
        printf STDERR "%s\n", $message;
        exit 2;
    }


    # execution
    ALWAYS("> Execution");
    if (! main::doIt()) {
        print STDERR "ERROR EXECUTION !\n";
        exit 5;
    }

    print STDOUT "END\n";
}

=begin nd
Function: init

Checks and stores options, initializes the default logger. Checks TMS directory and the pyramid's descriptor file.
=cut
sub init {

    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;

    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "pyr2pYr.pl --conf=<conf_file>\n";
            exit 0;
        },
        "usage" => sub {
            printf "pyr2pYr.pl --conf=<conf_file>\n";
            exit 0;
        },
        
        "conf=s" => \$options{conf}

    ) or do {
        printf "Unappropriate usage\n";
        printf "pyr2pYr.pl --conf=<conf_file>\n";
        exit -1;
    };
    
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => "INFO",
        layout => '%5p : %m (%M) %n'
    });

    ############# conf
    if (! defined $options{conf} || $options{conf} eq "") {
        ERROR("Option 'conf' not defined !");
        return FALSE;
    }

    my $confFile = File::Spec->rel2abs($options{conf});

    if (! -f $confFile) {
        ERROR(sprintf "configuration file does not exist : %s", $confFile);
        return FALSE;
    }
    $options{conf} = $confFile;
    


    return TRUE;
}

####################################################################################################
#                                 Group: Process methods                                           #
####################################################################################################

=begin nd
Function: config

Loads properties file.
=cut
sub config {

    ###################
    ALWAYS(">>> Load Properties ...");
    
    my $fprop = $options{conf};
    my $objProp = PYR2PYR::PropertiesLoader->new($fprop);
    
    if (! defined $objProp) {
        ERROR("Can not load properties !");
        return FALSE;
    }
  
    # save params properties
    my %params = $objProp->getAllProperties();
    $this{params} = \%params;

    # logger
    my $logger = $this{params}->{logger};
    if (defined $logger) {
    
        my @args;
        
        my $layout= '%5p : %m (%M) %n';

        my $level = $logger->{log_level};
        $level = "WARN" if (! defined $level);

        my $out;
        my $logfile = $logger->{log_file};
        if (defined $logfile) {
            if (exists $logger->{log_path} && defined $logger->{log_path}) {
                $logfile = File::Spec->catfile($logger->{log_path}, $logfile);
            }
            $out = ">>$logfile";
        } else {
            $out = "STDOUT";
        }
        
        # add the param logger by default (user settings !)
        push @args, {
            file   => $out,
            level  => $level,
            layout => $layout,
        };
        
        if ($out ne "STDOUT") {
            # add the param logger to the STDOUT
            push @args, {
                file   => "STDOUT",
                level  => $level,
                layout => $layout,
            },
        }

        Log::Log4perl->easy_init(@args);
    }
    
    return TRUE;
}

#################

sub addSubElm {
    my ($doc, $node, $name, $body) = @_;
    my $subElm = $node->addNewChild('', $name);
    $subElm->addChild( $doc->createTextNode($body) );
}

#################



my $BASHFUNCTIONS_CEPH   = <<'FUNCTIONS';

StoreTiles () {
    local fullPath=$1
    local col=$2
    local row=$3
    local prefix_objName=$4

    let imin=$col*${TPW}
    let imax=$col*${TPW}+${TPW}-1
    let jmin=$row*${TPH}
    let jmax=$row*${TPH}+${TPH}-1
                 
    slab2tiles $fullPath -pool ${POOL_NAME} -ij $col $row -t ${TPW} ${TPH} $prefix_objName
    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi
        

    for i in `seq $imin $imax` ; do 
        for j in `seq $jmin $jmax` ; do 
            echo "${prefix_objName}_${i}_${j}" >> ${TMP_LIST_FILE}
            if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi
        done
    done
}


StoreSlab () {
    local fullPath=$1
    local objName=$2
  
    rados -p ${POOL_NAME} put $objName $fullPath 
    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi

    echo "0/${objName}" >> ${TMP_LIST_FILE}
    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi
}

FUNCTIONS

my $BASHFUNCTIONS_S3   = <<'FUNCTIONS';

HOST=$(echo ${ROK4_S3_URL} | sed 's!.*://!!' | sed 's!:[0-9]\+$!!')

StoreSlab () {

    local fullPath=$1
    local objName=$2
    
    resource="/${BUCKET_NAME}/${objName}"
    contentType="application/octet-stream"
    dateValue=`TZ=GMT date -R`
    stringToSign="PUT\n\n${contentType}\n${dateValue}\n${resource}"

    signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${ROK4_S3_SECRETKEY} -binary | base64`

    curl -k -X PUT -T "${fullPath}" \
     -H "Host: ${HOST}" \
     -H "Date: ${dateValue}" \
     -H "Content-Type: ${contentType}" \
     -H "Authorization: AWS ${ROK4_S3_KEY}:${signature}" \
     ${ROK4_S3_URL}${resource}

    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi

    echo "0/${objName}" >> ${TMP_LIST_FILE}
    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi
}

FUNCTIONS

my $BASHFUNCTIONS_SWIFT   = <<'FUNCTIONS';

StoreSlab () {

    local fullPath=$1
    local objName=$2
    
    TOKEN=$(curl -s -ik \
        -H "Content-Type: application/json" \
        -XPOST \
        -d '
    {   "auth": {
            "scope": {
                "project": {"id": "'$ROK4_KEYSTONE_PROJECTID'"}
            },
            "identity": {
                "methods": ["password"],
                "password": {
                    "user": {
                        "domain": {"id": "'$ROK4_KEYSTONE_DOMAINID'"},
                        "password": "'$ROK4_SWIFT_PASSWD'",
                        "name": "'$ROK4_SWIFT_USER'"
                    }
                }
            }
        }
    }' $ROK4_SWIFT_AUTHURL | grep "X-Subject-Token" | cut -d":" -f2 | tr -cd '[:print:]')

    resource="/${CONTAINER_NAME}/${objName}"

    curl -k -X PUT -T "${fullPath}" \
     -H "X-Auth-Token: ${TOKEN}" \
     ${ROK4_SWIFT_PUBLICURL}${resource}

    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi

    echo "0/${objName}" >> ${TMP_LIST_FILE}
    if [ $? != 0 ] ; then echo $0 : Erreur a la ligne $(( $LINENO - 1)) >&2 ; exit 1; fi
}

FUNCTIONS

sub doIt {


    ############################## LES PARAMÈTRES
    # link to parameters
    my $params = $this{params};
    my $follow_links = 1;
    my $store_tiles = 0;
    my $script_index = 0;
    my $to_storage_type = undef;
    my $containerName = undef;


    # Test des parametres
    if ( exists $params->{from}->{follow_links} && defined $params->{from}->{follow_links} && uc($params->{from}->{follow_links}) eq "FALSE") {
        $follow_links = 0;
    }

    if ( defined $params->{to}->{pool_name} ) {
        $to_storage_type = "CEPH";
        $containerName = $params->{to}->{pool_name};
    }
    elsif ( defined $params->{to}->{bucket_name} ) {
        $to_storage_type = "S3";
        $containerName = $params->{to}->{bucket_name};
    }    
    elsif ( defined $params->{to}->{container_name} ) {
        $to_storage_type = "SWIFT";
        $containerName = $params->{to}->{container_name};
    }
    else {
        ERROR( "Neither pool_name nor bucket_name nor container_name provided. Not normal");
        return FALSE;
    }

    ### We want to store tiles separatly ?
    if ( exists $params->{to}->{tiles_storage} && defined $params->{to}->{tiles_storage} && uc($params->{to}->{tiles_storage}) eq "TRUE" ) {
        if ( $to_storage_type ne "CEPH" ) {
            ERROR("Tile storage only handled for ceph");
            return FALSE;
        }
        INFO("We store tiles on ceph separately");
        $store_tiles = 1;
    }
    
    my $pyrName = $params->{to}->{pyr_name};
    my $job_number = $params->{process}->{job_number};
    my $path_temp = $params->{process}->{path_temp};
    my $listFinal = $params->{to}->{pyr_desc_path} . "/$pyrName.list";

    ############################## LES DOSSIERS

    if (! -d $params->{to}->{pyr_desc_path}) {
        DEBUG (sprintf "Create the descriptor directory '%s' !", $params->{to}->{pyr_desc_path});
        eval { mkpath([$params->{to}->{pyr_desc_path}]); };
        if ($@) {
            ERROR(sprintf "Can not create the descriptor directory '%s' : %s !", $params->{to}->{pyr_desc_path}, $@);
            return FALSE;
        }
    }

    if (! -d $path_temp) {
        DEBUG (sprintf "Create the temporary directory '%s' !", $path_temp);
        eval { mkpath([$path_temp]); };
        if ($@) {
            ERROR(sprintf "Can not create the temporary directory '%s' : %s !", $path_temp, $@);
            return FALSE;
        }
    }

    ############################## LE DESCRIPTEUR DE PYRAMIDE

    my $tpw;
    my $tph;

    my $parser = XML::LibXML->new;
    my $doc    = $parser->parse_file($params->{from}->{pyr_desc_file}) or do {
        ERROR(sprintf "Erreur d'ouverture du fichier pyr (%s) !", $params->{from}->{pyr_desc_file});
        return FALSE;
    };
    my $root = $doc->documentElement();

    my @levelsList = $doc->getElementsByTagName('level');
    foreach my $level (@levelsList) {
        my $id = ($level->findnodes("tileMatrix"))[0]->textContent;

        my ($depthnode) = $level->findnodes("pathDepth");
        $level->removeChild($depthnode);

        if ( $store_tiles ) {
            my $tpw_node = ($level->findnodes("tilesPerWidth"))[0];
            $tpw = ($level->findnodes("tilesPerWidth"))[0]->textContent;
            my $tph_node = ($level->findnodes("tilesPerHeight"))[0];
            $tph = ($level->findnodes("tilesPerHeight"))[0]->textContent;

            $level->removeChild($tpw_node);
            $level->removeChild($tph_node);

            addSubElm($doc, $level, "tilesPerWidth", '0');
            addSubElm($doc, $level, "tilesPerHeight", '0');
        }

        my ($baseDir) = $level->findnodes("baseDir");
        $level->removeChild($baseDir);

        my ($masknode) = $level->findnodes("mask");
        if (defined $masknode) {
            addSubElm($doc, $masknode, "maskPrefix", "${pyrName}_MSK_$id");
            my ($maskfilenode) = $level->findnodes("mask/baseDir");
            $masknode->removeChild($maskfilenode);
        }

        if ( $to_storage_type eq "CEPH" ) {
            my $cephcontext = $level->addNewChild('', "cephContext");
            addSubElm($doc, $cephcontext, "poolName", $containerName);
        }
        elsif ( $to_storage_type eq "S3" ) {
            my $s3context = $level->addNewChild('', "s3Context");
            addSubElm($doc, $s3context, "bucketName", $containerName);
        }        
        elsif ( $to_storage_type eq "SWIFT" ) {
            my $swiftcontext = $level->addNewChild('', "swiftContext");
            addSubElm($doc, $swiftcontext, "containerName", $containerName);
        }
        addSubElm($doc, $level, "imagePrefix", "${pyrName}_IMG_$id");

        $level->normalize;

    }

    open (PYR_OUT, ">", $params->{to}->{pyr_desc_path} . "/$pyrName.pyr") or do {
        ERROR(sprintf "Erreur d'ouverture du fichier desc (%s) : %s!", $params->{to}->{pyr_desc_path} . "/$pyrName.pyr", $!);
        return FALSE;
    };

    print PYR_OUT $doc->toString(2);
    close PYR_OUT;

    # pretty xml
    my $cmd = sprintf("xmllint --output %s --format %s", $params->{to}->{pyr_desc_path} . "/$pyrName.pyr", $params->{to}->{pyr_desc_path} . "/$pyrName.pyr");
    my $return = `$cmd`;
    if ( $? ) {
        ERROR(sprintf "Impossible de formater le fichier xml (%s) : %s",$params->{to}->{pyr_desc_path} . "/$pyrName.pyr", $return);
    }

    ############################## LES SCRIPTS

    ### Ouverture des flux et initialisation des N splits

    my @scripts_done;
    my @streams;
    for (my $i = 1 ; $i < $job_number + 1; $i++){
        my $STREAM;
        my $list = "${path_temp}/SCRIPT_$i.list";
        my $file = "${path_temp}/SCRIPT_$i.sh";
        if ( ! (open $STREAM,">", $file )) {
            ERROR(sprintf "Can not open stream to '%s' !", $file);
            return FALSE;
        }
        push(@streams, $STREAM);
        print $STREAM "#!/bin/bash\n\n";
        print $STREAM "TMP_LIST_FILE=$list\n";
        print $STREAM "SECONDS=0\n";
        if ( $to_storage_type eq "CEPH" ) {
            print $STREAM "POOL_NAME=$containerName\n";
        }
        elsif ( $to_storage_type eq "S3" ) {
            print $STREAM "BUCKET_NAME=$containerName\n";
        }        
        elsif ( $to_storage_type eq "SWIFT" ) {
            print $STREAM "CONTAINER_NAME=$containerName\n";
        }
        if ( $store_tiles ) {
            print $STREAM "TPW=$tpw\n";
            print $STREAM "TPH=$tph\n";
        }
        print $STREAM "TMP_LIST_FILE=$list\n";
        print $STREAM "date\n";
        if ( $to_storage_type eq "CEPH" ) {
            print $STREAM $BASHFUNCTIONS_CEPH;
        }
        elsif ( $to_storage_type eq "S3" ) {
            print $STREAM $BASHFUNCTIONS_S3;
        }
        elsif ( $to_storage_type eq "SWIFT" ) {
            print $STREAM $BASHFUNCTIONS_SWIFT;
        }

        push(@scripts_done, 0);
    }

    ### Ouverture et initialisation du finisher

    my $STREAMFINISHER;
    my $file = "${path_temp}/SCRIPT_FINISHER.sh";
    if ( ! (open $STREAMFINISHER,">", $file )) {
        ERROR(sprintf "Can not open stream to '%s' !", $file);
        return FALSE;
    }
    print $STREAMFINISHER "#!/bin/bash\n\n";
    print $STREAMFINISHER "echo '0=${containerName}' > $listFinal\n";
    print $STREAMFINISHER "echo '#' >> $listFinal\n";
    print $STREAMFINISHER "cat ${path_temp}/*.list >> $listFinal\n";

    close $STREAMFINISHER;


    ############################## TRAITEMENT DES IMAGES

    my $inputList = $params->{from}->{pyr_list_file};
    open (FILE, "<", $inputList) or do {
        ERROR(sprintf "Erreur d'ouverture du fichier list (%s) : %s!", $inputList, $!);
        return FALSE;
    };

    ### Récupération des racines

    my $hashLine;
    my %roots;
    while (my $line = <FILE>) {

        chomp $line;
        if ($line eq "#") {
            $hashLine = $.;
            last;
        }

        my ($index,$root) = split('=',$line);
        $roots{$index} = $root;
    }

    ### Calcul du nombre d'image à traiter
    my $wc = `wc -l $inputList | cut -d' ' -f1`;
    chomp($wc);

    my $totalImages = $wc - $hashLine;
    INFO("$totalImages image(s) to process");
    my $totalImagesPerScript = int($totalImages/$job_number);
    INFO("$totalImagesPerScript image(s) per script to process");

    ### Cephisation image par image

    while (my $line = <FILE>) {

        chomp $line;

        my @path = split('/',$line);
        if ( $path[0] ne "0" && $path[1] ne "NODATA" && ! $follow_links ) {
            next;
        }
        $path[0] = $roots{$path[0]};
        my $fullPath = File::Spec->catfile(@path);
        my $level = $path[2];
        my $col;
        my $row;

        my $objName;
        my $prefix_objName;

        if ($path[1] eq "NODATA") {
            next;
        }

        if ($path[1] eq "MASK") {
            my $a = $path[3];
            my $b = $path[4];
            my $c = $path[5];
            $c =~ s/\.tif//;

            ($col, $row) = COMMON::Base36::b36PathToIndices("$a/$b/$c");
            $objName = sprintf("%s_MSK_%s_%s_%s", $params->{to}->{pyr_name}, $level, $col, $row);
            $prefix_objName = sprintf("%s_MSK_%s", $params->{to}->{pyr_name}, $level);
        }

        if ($path[1] eq "IMAGE") {
            my $a = $path[3];
            my $b = $path[4];
            my $c = $path[5];
            $c =~ s/\.tif//;

            ($col, $row) = COMMON::Base36::b36PathToIndices("$a/$b/$c");
            $objName = sprintf("%s_IMG_%s_%s_%s", $params->{to}->{pyr_name}, $level, $col, $row);
            $prefix_objName = sprintf("%s_IMG_%s", $params->{to}->{pyr_name}, $level);

        }

        my $cmd;
        if ( $store_tiles && defined($col) ) {
            $cmd = sprintf("StoreTiles %s %s %s %s\n", $fullPath, $col, $row, $prefix_objName);
            DEBUG($cmd);
        }
        else {
            $cmd = sprintf("StoreSlab %s %s\n", $fullPath, $objName);
            DEBUG($cmd);
        }

        my $stream = $streams[$script_index];
        print $stream $cmd;

        my $current_progress = int( $scripts_done[$script_index] / $totalImagesPerScript * 100);
        my $next_progress = int( ($scripts_done[$script_index] + 1) / $totalImagesPerScript * 100);

        if ($next_progress != $current_progress) {
            $next_progress = 100 if ($next_progress > 100);
            print $stream "echo \"------------- Progression : $next_progress%\"\n";
        }

        $scripts_done[$script_index] = $scripts_done[$script_index] + 1;
        $script_index = ($script_index + 1) % $job_number;
    }

    ############################## FERMETURE DES FLUX

    for (my $i = 0 ; $i < $job_number ; $i++){
        my $stream = $streams[$i];
        print $stream "echo \"------------- Progression : COMPLETE\"\n";
        print $stream "date\n";
        print $stream "duration=\$SECONDS\n";
        print $stream "date -u -d @\${duration} +\"%T\"\n";
        close $stream;
    }

    close FILE;

    return TRUE;

}



################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__

=begin nd
Section: Details

Group: Command's options

    --help - Display the link to the technic documentation.

    --usage - Display the link to the technic documentation.

    --version - Display the tool version.

    --conf=path - Path to configuration file of the pyramid. This option is mandatory.

Group: Write a configuration file

A file configuration can be composed of sections and parameters following :

    (start code)
    [ section ]
    parameter = value
    ;comments
    (end code)

Group: PYR2PYR global configuration file

Properties by section.

Topic: logger

    log_path - Directory path where to write log_file
    log_file - Path to print too output (in addition to STDOUT). Log file path : *log_path/log_file*
    log_level - Define importance level from which we print messages. From less to more important : DEBUG - INFO - WARN - ERROR - ALWAYS (WARN by default).

Example:
    (start code)
    [ logger ]
    log_path = /var/log
    log_file = be4ceph_log_yyyy-mm-dd.txt
    log_level = INFO
    (end code)

Topic: from

    pyr_desc_file - Path to the pyramid's descriptor to convert
    pyr_list_file - Path to the pyramid's list to convert. Only files in this list are processed
    follow_links - Optionnal. If set to "false", only "real" files are transposed.

Example:
    (start code)
    [ from ]
    pyr_desc_file=/home/ign/DESC/BDORTHO.pyr
    pyr_list_file=/home/ign/DESC/BDORTHO.list
    (end code)

Topic: to

    pool_name - Pool (must already exist). If not, bucket_name mandatory.
    bucket_name - Bucket (must already exist). If not, pool_name mandatory.
    pyr_name - Pyramid's name, used to prefix objects. Mandatory.
    pyr_desc_path - Directory where new pyramid's descriptor and list are written. Mandatory.
    tiles_storage - Optionnal (only for ceph). If set to "true", slab are divised and tiles are stored separated

Example:
    (start code)
    [ to ]
    pool_name=PYRAMIDS
    pyr_name=MONDE12FEUILLES_JPG_PM_TILE
    pyr_desc_path=/home/visiteur/PYR2PYR/
    tiles_storage=TRUE
    (end code)

Topic: process

    job_number - Level of parallelization for scripts. Mandatory.
    path_temp - Scripts and temporary lists are written in this directory. Mandatory.

Example:
    (start code)
    [ process ]
    path_temp = /home/ign/SCRIPTS
    job_number = 16
    (end code)

Group: Externals tools

Scripts' execution needs following tools:

    - rados
    - openssl
    - curl
    
=cut
