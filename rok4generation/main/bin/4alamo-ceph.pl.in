#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière 
# 
# Géoportail SAV <geop_services@geoportail.fr>
# 
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
# 
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use, 
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info". 
# 
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability. 
# 
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or 
# data to be ensured and,  more generally, to use and operate it in the 
# same conditions as regards security. 
# 
# The fact that you are presently reading this means that you have had
# 
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: 4alamo-ceph.pl

Section: 4ALAMO-CEPH tool

Synopsis:
    (start code)
    perl 4alamo-ceph.pl --conf=path [ --env=path ]
    # All parameters of the --env config file can be overided by --conf config file parameter
    (end code)

Tool allowing to generate a veteor pyramid of TIFF images containing mapbox vector tiles, several scales, from serveral databases sources (PostgreSQL). Pyramid can be broadcast with Rok4server using TMS.

This tool write scripts, to execute to obtain the pyramid in a Ceph pool.

Possibility to provided an ancestor pyramid to update

1 data source type :
    - PostgreSQL database

Step 1:
(see 4alamo_part1.png)

Step 2:
(see 4alamo_part2.png)
=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

use Getopt::Long;

use Data::Dumper;
local $Data::Dumper::Maxdepth = 2;

use File::Basename;
use File::Spec;
use File::Path;
use Cwd;

use Log::Log4perl qw(:easy);

# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My module
use FOURALAMO::PropertiesLoader;
use COMMON::PyramidVector;
use COMMON::DataSourceLoader;
use COMMON::Forest;
use COMMON::Array;
use COMMON::CheckUtils;

################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

my @UPDATESMODES = ( "slink", "copy", "inject" );

################################################################################
# Pas de bufferisation des sorties.
$|=1;

####################################################################################################
#                                       Group: Variables                                           #
####################################################################################################

# Variable: version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: options

Contains 4alamo-ceph call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
    properties - Configuration file
    environment - Environment file
=cut
my %options =
(
    "version"    => 0,
    "help"       => 0,
    "usage"      => 0,
    
    # Configuration
    "properties"  => undef, # file properties params (mandatory) !
    "environment" => undef  # file environment 4alamo params (optional) !
);

=begin nd
Variable: this

All parameters by section :

    logger - Can be null
    datasource - 
    pyramid -
    process - 
=cut
my %this =
(
    params => {
        logger        => undef,
        datasource    => undef,
        pyramid       => undef,
        process       => undef
    },
);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <config>, <doIt>
=cut
sub main {
    printf("4ALAMO-CEPH: version [%s]\n",$VERSION);
    # message
    my $message = undef;

    # initialization
    ALWAYS("> Initialization");
    if (! main::init()) {
        $message = "ERROR INITIALIZATION !";
        printf STDERR "%s\n", $message;
        exit 1;
    }

    $message = "BEGIN";
    printf STDOUT "%s\n", $message;

    # configuration
    ALWAYS("> Configuration");
    if (! main::config()) {
        $message = "ERROR CONFIGURATION !";
        printf STDERR "%s\n", $message;
        exit 2;
    }

    # execution
    ALWAYS("> Execution");
    if (! main::doIt()) {
        $message = "ERROR EXECUTION !";
        printf STDERR "%s\n", $message;
        exit 3;
    }

    $message = "END";
    printf STDOUT "%s\n", $message;
}

=begin nd
Function: init

Checks options and initializes the default logger. Check environment file (optionnal) and properties file (mandatory).
=cut
sub init {
  
    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;
    
    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/4alamo-ceph-pl.html\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/4alamo-ceph-pl.html\n" ;
            exit 0;
        },
        
        "properties|conf=s" => \$options{properties},
        "environment|env=s" => \$options{environment}
    ) or do {
        printf "Unappropriate usage\n";
        printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/4alamo-ceph-pl.html\n";
        exit -1;
    };
  
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => $WARN,
        layout => '%5p : %m (%M) %n'
    });

    # We make path absolute

    # properties : mandatory !
    if (! defined $options{properties} || $options{properties} eq "") {
        ERROR("Option 'properties' not defined !");
        return FALSE;
    }
    my $fproperties = File::Spec->rel2abs($options{properties});
    $options{properties} = $fproperties;

    # env : optional !
    if (defined $options{environment} && $options{environment} ne "") {
        my $fenvironment = File::Spec->rel2abs($options{environment});
        $options{environment} = $fenvironment;
    }
    
    return TRUE;
}

=begin nd
Function: config

Loads environment and properties files and merge parameters. Those in the properties file have priority over those in the environment file. We also check environment variable (object storage configuration).

See Also:
    <checkParams>
=cut
sub config {

    ###################
    ALWAYS(">>> Load Properties ...");
    
    my $fprop = $options{properties};
    my $objProp = FOURALAMO::PropertiesLoader->new($fprop);
    
    if (! defined $objProp) {
        ERROR("Can not load specific properties !");
        return FALSE;
    }
    
    my %props = $objProp->getAllProperties();
    
    if (! scalar keys %props) {
        ERROR("All parameters properties are empty !");
        return FALSE;
    }

    ###################

    my $hashref;

    ###################
    ALWAYS(">>> Treat optionnal environment ...");

    my $fenv = undef;
    $fenv = $options{environment} if (defined $options{environment} && $options{environment} ne "");

    if (defined $fenv) {
        my $objEnv = COMMON::Config->new({
            'filepath' => $fenv,
            'format' => "INI"
        });

        if (! defined $objEnv) {
            ERROR("Can not load environment properties !");
            return FALSE;
        }

        my $envs = $objEnv->getRawConfig();

        if (! scalar keys %{$envs}) {
            ERROR("All parameters environment are empty !");
            return FALSE;
        }
        
        foreach (keys %{$this{params}}) {
            my $href = { map %$_, grep ref $_ eq 'HASH', ($envs->{$_}, $props{$_}) };
            $hashref->{$_} = $href;
        }
    } else {
        foreach (keys %{$this{params}}) {
            my $href = { map %$_, grep ref $_ eq 'HASH', ($props{$_}) };
            $hashref->{$_} = $href;
        }
    }

    ###################

    if (! defined $hashref) {
        ERROR("Can not merge all parameters of properties !");
        return FALSE;
    }
  
    # save params properties
    $this{params} = $hashref;
    
    ###################
    # check parameters
    
    my $pyramid     = $this{params}->{pyramid};       #
    my $logger      = $this{params}->{logger};        # 
    my $datasource  = $this{params}->{datasource};    #
    my $process     = $this{params}->{process};       # 
    
    # pyramid
    if (! defined $pyramid) {
        ERROR("Parameters Pyramid can not be null !");
        return FALSE;
    }
    
    # datasource
    if (! defined $datasource) {
        ERROR("Parameters Datasource can not be null !");
        return FALSE;
    }
    
    # process
    if (! defined $process) {
        ERROR("Parameters Process can not be null !");
        return FALSE;
    }

    # logger
    if (defined $logger) {
    
        my @args;
        
        my $layout= '%5p : %m (%M) %n';
        my $level = $logger->{log_level};
        my $out   = sprintf (">>%s", File::Spec->catfile($logger->{log_path}, $logger->{log_file}))
            if (! COMMON::CheckUtils::isEmpty($logger->{log_path}) && ! COMMON::CheckUtils::isEmpty($logger->{log_file}));

        $out   = "STDOUT" if (! defined $out);
        $level = "WARN" if (! defined $level);

        if ($level =~ /(ALL|DEBUG)/) {
            $layout = '%5p : %m (%M) %n';
        }
        
        # add the param logger by default (user settings !)
        push @args, {
            file   => $out,
            level  => $level,
            layout => $layout,
        };
        
        if ($out ne "STDOUT") {
            # add the param logger to the STDOUT
            push @args, {
                file   => "STDOUT",
                level  => $level,
                layout => $layout,
            },
        }
        Log::Log4perl->easy_init(@args);
    }

    # Environment variables

    if (! COMMON::ProxyStorage::checkEnvironmentVariables("CEPH")) {
        ERROR("Environment variable is missing for a Ceph storage");
        return FALSE;
    }
    
    return TRUE;
}

=begin nd
Function: writeListAndReferences
=cut
sub writeListAndReferences {
    my $forest = shift;
    my $newpyr = shift;
    my $ancestor = shift;
    my $force = shift;

    if (! defined $force) {
        $force = FALSE;     
    }

    my $updateMode = $this{params}->{pyramid}->{update_mode};

    if ($newpyr->{type} eq "READ") {
        ERROR("Cannot write list of 'read' pyramid");
        return FALSE;        
    }

    if (defined $ancestor && ref ($ancestor) ne "COMMON::PyramidVector" ) {
        ERROR(sprintf "Ancestor, if provided, have to be a COMMON::PyramidVector ! ");
        return FALSE;
    }

    my $newListPath = $newpyr->getListFile();
    my $newListPathTmp = "$newListPath.tmp";

    if (! $force && -f $newListPath) {
        ERROR(sprintf "New pyramid list ('%s') exist, can not overwrite it ! ", $newListPath);
        return FALSE;
    }

    my $dir = File::Basename::dirname($newListPath);
    if (! -d $dir) {
        eval { mkpath([$dir]); };
        if ($@) {
            ERROR(sprintf "Can not create the pyramid list directory '%s' : %s !", $dir , $@);
            return FALSE;
        }
    }
    
    # La racine de la pyramide est un nom de pool dans le cas CEPH
    my $containerName = $newpyr->getDataPool();
    
    if (! defined $ancestor) {
        # Pas d'ancêtre, on doit juste écrire l'en tête : le dossier propre à cette pyramide ou le nom du conteneur objet

        my $NEWLIST;

        if (! open $NEWLIST, ">", $newListPath) {
            ERROR(sprintf "Cannot open new pyramid list file (write) : %s",$newListPath);
            return FALSE;
        }

        print $NEWLIST "0=$containerName\n";
        print $NEWLIST "#\n";
        close $NEWLIST;

        return TRUE
    }

    ############################## RÉFÉRENCEMENT DES OBJETS DE L'ANCÊTRE #######################################

    my $newPyrName = $newpyr->getName();
    my $ancestorPyrName = $ancestor->getName();

    # On a un ancêtre, il va falloir en référencer toutes les dalles

    if (! defined $forest || ref ($forest) ne "COMMON::Forest" ) {
        ERROR(sprintf "We need a COMMON::Forest to write pyramid list ! ");
        return FALSE;
    }

    # On va lire la liste de l'ancêtre
    my $ancestorListPath = $ancestor->getListFile();
    my $OLDLIST;
    
    if (! open $OLDLIST, "<", $ancestorListPath) {
        ERROR("Cannot open old pyramid list file (read) : $ancestorListPath");
        return FALSE;
    }
    
    while( my $line = <$OLDLIST> ) {
        chomp $line;

        ############# ON ZAPPE JUSTE LE HEADER #############

        if ($line eq "#") {
            # separator between caches' roots and images
            last;
        }
    }

    my $NEWLIST;

    if ($updateMode eq "inject") {
        # En mode injection, il ne faut pas écrire directement le fichier de la nouvelle pyramide, car c'est celui de l'ancêtre
        if (! open $NEWLIST, ">", $newListPathTmp) {
            ERROR("Cannot open temporary (inject mode) new pyramid list file (write) : $newListPathTmp");
            return FALSE;
        }
    } else {
        # Sinon, on peut directement écrire dans le fichier liste final de la nouvelle pyramide
        if (! open $NEWLIST, ">", $newListPath) {
            ERROR("Cannot open new pyramid list file (write) : $newListPath");
            return FALSE;
        }
    }

    print $NEWLIST "0=$containerName\n";
    print $NEWLIST "#\n";
    
    while( my $line = <$OLDLIST> ) {
        chomp $line;
        
        # Une ligne du fichier c'est
        # Cas objet : 0/PYRAMID_IMG_15_15656_5423
        my @parts = split("/", $line);
        # La première partie est donc toujours l'index du pool, déjà connu
        shift(@parts);

        # Dans le cas d'un stockage objet, on a un nom d'objet de la forme BLA_BLA_DATATYPE_LEVEL_COL_ROW
        # DATATYPE vaut MSK ou IMG
        my @p = split("_", join("", @parts));
        my $col = $p[-2];
        my $row = $p[-1];
        my $level = $p[-3];
        my $dataType = $p[-4];

        # Dans le cas objet, la racine est seulement le conteneur, il faut aussi remplacer le nom de la pyramide qui est contenu dans le nom de l'objet
        my $ancestorSlab = $line;
        $ancestorSlab =~ s/^[0-9]+/$containerName/;
        my $newSlab = "${containerName}/${newPyrName}_${dataType}_${level}_${col}_${row}";

        if (! defined $newpyr->getLevel($level)) {
            # La dalle appartient à un niveau qui n'est pas voulu dans la nouvelle pyramide
            next;
        }

        if ($updateMode eq "slink") {
            if (! defined COMMON::ProxyStorage::symLink("CEPH", $ancestorSlab, "CEPH", $newSlab)) {
                ERROR("The ancestor slab '$ancestorSlab' cannot be referenced by sym link in the new pyramid");
                return FALSE;
            }
        }
        elsif ($updateMode eq "copy") {
            if (! COMMON::ProxyStorage::copy("CEPH", $ancestorSlab, "CEPH", $newSlab)) {
                ERROR("The ancestor slab '$ancestorSlab' cannot be referenced by copy in the new pyramid");
                return FALSE;
            }
        }
        
        if (! $forest->containsNode($level,$col,$row)) {
            # This image is not in the forest, it won't be modified by this generation.
            # We add it now to the list (real file path)

            # slink : we print the name of the slab in the old pyramid
            # else : object is duplicate, we put the name of the slab in the new pyramid
            if ($updateMode eq 'slink' || $updateMode eq 'inject') {
                print $NEWLIST "$line\n";
            } else {
                my $slab = $newSlab;
                $slab =~ s/^$containerName/0/;
                print $NEWLIST "$slab\n";
            }
        }
        
    }
    
    close $OLDLIST;
    close $NEWLIST;

    if ($updateMode eq "inject") {
        # On peut maintenant mettre le nouveau fichier liste à la place de l'ancien
        DEBUG("Inject mode: $newListPathTmp -> $newListPath");
        `mv $newListPathTmp $newListPath`;
    }
    
    return TRUE;
}

=begin nd
Function: doIt

Steps in order, using parameters :
    - load ancestor pryamid if exists : <COMMON::PyramidVector::new>
    - load data sources : <COMMON::DataSourceLoader::new>
    - create the Pyramid object : <COMMON::PyramidVector::new>
    - update the Pyramid object with the TMS : <COMMON::PyramidVector::bindTileMatrixSet>
    - update data sources with the levels : <COMMON::DataSourceLoader::updateDataSources>
    - create the pyramid's levels : <COMMON::PyramidVector::addLevel>
    - create the Forest object : <COMMON::Forest::new>
    - write the pyramid's list : <writeListAndReferences>
    - write the pyramid's descriptor : <COMMON::PyramidVector::writeDescriptor>
    - compute trees (write scripts) : <COMMON::Forest::computeGraphs>
=cut
sub doIt {

    #######################
    # link to parameters
    my $params = $this{params};
    
    #######################
    # objects to implemented
    
    my $objAncestorPyramid = undef;
    my $objPyramid = undef;
    my $objDSL = undef;
    my $objForest = undef;

    #######################
    # if ancestor, read it

    if (exists $params->{pyramid}->{pyr_name_old} && defined $params->{pyramid}->{pyr_name_old}) {
    
        ALWAYS(">>> Load an ancestor pyramid ...");

        if (! exists $params->{pyramid}->{pyr_desc_path_old} || ! defined $params->{pyramid}->{pyr_desc_path_old}) {
            ERROR("If ancestor pyramid, we need the 'pyr_desc_path_old' parameter with 'pyr_name_old'");
            return FALSE;
        }

        if (! defined $params->{pyramid}->{update_mode} || $params->{pyramid}->{update_mode} eq "") {
            ERROR("If ancestor pyramid, we need the 'update_mode' parameter");
            return FALSE;
        }

        my $updateMode = $params->{pyramid}->{update_mode} ;
        if (! defined COMMON::Array::isInArray($updateMode, @UPDATESMODES) ) {
            ERROR("Update mode '$updateMode' is not allowed for FILE pyramids");
            return FALSE;
        }

        my $ancestorDescriptor = File::Spec->catdir($params->{pyramid}->{pyr_desc_path_old}, $params->{pyramid}->{pyr_name_old});
        $ancestorDescriptor .= ".pyr" if ($ancestorDescriptor !~ m/\.pyr/i);

        $objAncestorPyramid = COMMON::PyramidVector->new("DESCRIPTOR", $ancestorDescriptor );
        if (! defined $objAncestorPyramid) {
            ERROR("Cannot load ancestor pyramid !");
            return FALSE;
        }

        if (! $objAncestorPyramid->bindTileMatrixSet($params->{pyramid}->{tms_path})) {
            ERROR("Cannot bind TMS to ancestor pyramid !");
            return FALSE;
        }

        if ($objAncestorPyramid->getStorageType() ne "CEPH") {
            ERROR("Ancestor pyramid have to be a CEPH pyramid !");
            return FALSE;
        }

        # Dans le cas de l'injection, on veut que la nouvelle pyramide soit écrite sur l'ancienne
        # On va donc modifier le nom et les emplacements pour mettre les mêmes que ceux de l'ancêtre

        if ($updateMode eq "inject") {
            WARN("'inject' update mode is selected, ancestor is modified, without possible rollback.");
            $params->{pyramid}->{pyr_desc_path} = $objAncestorPyramid->getDescriptorDir();
            $params->{pyramid}->{pyr_data_pool_name} = $objAncestorPyramid->getDataPool();
            $params->{pyramid}->{pyr_name_new} = $objAncestorPyramid->getName();
        }
    }
    
    #######################
    # load data source
    
    ALWAYS(">>> Load Data Source ...");

    $objDSL = COMMON::DataSourceLoader->new($params->{datasource});
    if (! defined $objDSL) {
        ERROR("Cannot load data sources !");
        return FALSE;
    }
    DEBUG($objDSL->exportForDebug());

    #######################
    # create a pyramid
    
    ALWAYS(">>> Load the new pyramid ...");
    
    $objPyramid = COMMON::PyramidVector->new("VALUES", $params->{pyramid}, $objAncestorPyramid );
    if (! defined $objPyramid) {
        ERROR("Cannot create output Pyramid !");
        return FALSE;
    }

    if ($objPyramid->getStorageType() ne "CEPH") {
        ERROR("New pyramid have to be a CEPH pyramid !");
        return FALSE;
    }

    if (! $objPyramid->bindTileMatrixSet($params->{pyramid}->{tms_path})) {
        ERROR("Cannot bind TMS to output Pyramid !");
        return FALSE;
    }

    my $objTMS = $objPyramid->getTileMatrixSet();

    # update datasources top/bottom levels !
    my ($bottomOrder,$topOrder) = $objDSL->updateDataSources($objTMS, $params->{pyramid}->{pyr_level_top});
    if ($bottomOrder == -1) {
        ERROR("Cannot determine top and bottom levels, from data sources.");
        return FALSE;
    }
    
    #######################
    # add levels to pyramid
    
    ALWAYS(">>> Determine levels ...");
    
    # Create all level between the bottom and the top
    for (my $order = $bottomOrder; $order <= $topOrder; $order++) {

        my $ID = $objTMS->getIDfromOrder($order);
        if (! defined $ID) {
            ERROR(sprintf "Cannot identify ID for the order %s !", $order);
            return FALSE;
        }

        if (! $objPyramid->addLevel($ID, $objAncestorPyramid, $objDSL->getDataSource($order)->getDatabaseSource()) ) {
            ERROR("Cannot add level $ID");
            return FALSE;            
        }
    }
    
    # we cannot write the pyramid descriptor and cache now. We need data's limits, calculated by graphs.
  
    #######################
    # create forest : load graphs
    
    ALWAYS(">>> Load Forest ...");
  
    $objForest = COMMON::Forest->new(
        $objPyramid,
        $objDSL,
        $params->{process}
    );
  
    if (! defined $objForest) {
        ERROR("Can not load the forest !");
        return FALSE;
    }

    #######################

    my $force = FALSE;
    if (defined $objAncestorPyramid && $this{params}->{pyramid}->{update_mode} eq "inject") {
        $force = TRUE;
    }

    #######################
    # write the pyramid list
    
    ALWAYS(">>> Write the pyramid's list ...");

    if ( ! writeListAndReferences($objForest, $objPyramid, $objAncestorPyramid, $force) ) {
        ERROR("Can not write Pyramid list and reference ancestor if exist !");
        return FALSE;
    }
    
    #######################
    # write the pyramid descriptor

    ALWAYS(">>> Write the pyramid's descriptor ...");

    if ( ! $objPyramid->writeDescriptor($force) ) {
        ERROR("Can not write Pyramid file !");
        return FALSE;
    }
  
    #######################
    # compute graphs
    
    ALWAYS(">>> Compute forest ...");
    
    if (! $objForest->computeGraphs()) {
        ERROR("Can not compute forest !");
        return FALSE;
    }
    
    DEBUG(sprintf "FOREST (debug export) = %s", $objForest->exportForDebug());
    
    return TRUE;
}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__

=begin nd
Section: Details

Group: Command's options

    --help - Display the link to the technic documentation.

    --usage - Display the link to the technic documentation.

    --version - Display the tool version.

    --conf=path - Path to configuration file of the pyramid. This option is mandatory.

    --env=path - Path to environment file of all pyramid, it's the common configuration. This option is optional. By default, the file configuration of install is used.

Group: Mandatory environment variable

    ROK4_CEPH_CONFFILE
    ROK4_CEPH_USERNAME
    ROK4_CEPH_CLUSTERNAME

    ROK4_REDIS_PORT
    ROK4_REDIS_PASSWD
    ROK4_REDIS_HOST

Group: Write a configuration file

A file configuration can be composed of sections and parameters following :

    (start code)
    [ section ]
    parameter = value
    ;comments
    (end code)

In a data source configuration, sections are level ID, from which the data source is used.

Group: 4ALAMO global configuration file

Properties by section.

Topic: logger

    log_path - Directory path where to write log_file
    
    log_file - Path to print too output (in addition to STDOUT). Log file path : *log_path/log_file*

    log_level - Define importance level from which we print messages. From less to more important : DEBUG - INFO - WARN - ERROR - ALWAYS (WARN by default).

Example:
    (start code)
    [ logger ]
    log_path = /var/log
    log_file = 4alamo_log_yyyy-mm-dd.txt
    log_level = INFO
    (end code)

Topic: datasource

    filepath_conf - Complete file path to configuration file for data sources (*/home/ign/SOURCE/sources.txt*)

Example:
    (start code)
    [ datasource ]
    filepath_conf = /home/IGN/sources.txt
    (end code)

Topic: pyramid

For more informations about properties, see <COMMON::PyramidVector>.

    pyr_name_new - Name of the new pyramid, used to name the descriptor, the pyramid's list, the temporary directory and prefix the Ceph objects. Mandatory.
    pyr_desc_path - Directory path, where to write the descriptor and the list. Mandatory.
    pyr_data_pool_name - Mandatory.

    pyr_name_old - Ancestor's name. If this parameter is present, generation is an update.
    pyr_desc_path_old - Directory path where to find the ancestor's descriptor.
    update_mode - Possible values :
        slink, copy : existing pyramid, the way the new cache will reference the ancestor's cache.
        inject : no new pyramid. The old one is updated. CAUTION : old pyramid is irreversibly modified

    image_width, image_height - Number a tile in the cache image (slab), widthwise and heightwise. 16 if not provided and no ancestor.

    tms_name - TMS file name, with extension *.tms*. Mandatory if no ancestor.

    tms_path - Directory, where to find the TMS file. Mandatory.

    pyr_level_top - Optionnal. If we don't want pyramid to be generated to the TMS top level, we can force the top level. It have to be consistent with base levels in the data sources configuration file.

Examples:
    (start code)
    [ pyramid ]
    tms_name = PM.tms
    tms_path = /home/ign/TILEMATRIXSETS

    pyr_data_pool_name = PYRAMIDS
    pyr_desc_path = /home/ign/PYRAMIDS
    pyr_name_new = CEPH_DALLE

    pyr_level_top = 5

    image_width         = 8
    image_height        = 8

    (end code)

Topic: process

For more informations about properties, see <COMMON::Forest> and <COMMON::Commands>.

    job_number - Level of parallelization for scripts. Distribution details are different according to the kind of graph (see <COMMON::QTree> and <COMMON::Graph>). Mandatory.

    path_temp - Temporary directory path proper to each script : temporary files are written in *path_temp/pyr_name_new/SCRIPT_ID*.

    path_temp_common - Common temporary directory path : temporary files which have to be shared between several scripts are written in *path_temp_common/pyr_name_new/COMMON*. Mandatory.

    path_shell - Directory path, to write scripts in. Scripts are named in like manner for all generation. That's why the path_shell must be specific to the generation (contains the name of the pyramid for example). Mandatory.

Example:
    (start code)
    [ process ]
    path_temp = /tmp/PRIVATE/
    path_temp_common = /tmp/COMMON/
    path_shell  = /home/IGN/SCRIPT/ORTHO
    job_number = 16
    (end code)

Group: Paths in brief

    - Descriptor file : *pyr_desc_path/pyr_name.pyr*
    - List file: *pyr_desc_path/pyr_name.list*
    - TMS file: *tms_path/tms_name*
    - Scripts: *path_shell/SCRIPT_X.sh*
    - Temporary directory: *path_temp/pyr_name_new/SCRIPT_X*
    - Common temporary directory: *path_temp_common/pyr_name_new/COMMON*

Group: DataSource configuration

For more informations about datasource properties loading, see <COMMON::DataSourceLoader> and <COMMON::DataSource>.

A datasource configuration to generate a vector pyramid is a JSON file. Structure is:

|   level
|       srs: Mandatory if extent is provided, and it is its projection and considered as data source projection
|       extent: Bbox or wkt file path, area to generate, in the previous projection
|       db:
|           host: postgis server host. Mandatory
|           port: postgis server port. 5432 if not provided
|           database: postgis database name. Mandatory
|           user: postgis server user. Mandatory
|           password postgis server password. Mandatory
|       tables: array of
|           schema: table schema name. 'public' if not provided
|           native_name: table name in the schema. Mandatory
|           final_name: final layer name in MVT tiles. Equals to native_name if not provided.
|           attributes: attributes list to export in vector tiles. "*" means all attributes, "" or not provided means no attributes (except geometry)
|           filter: 'WHERE' clause. Optionnal.

Examples:
    (start code)
    {
        "13":{
            "srs": "EPSG:3857",
            "extent": "/path/to/geometry.wkt",
            "db": {
                "host": "postgis.ign.fr",
                "port": "5433",
                "database": "geobase",
                "user": "ign",
                "password": "pwd"
            },
            "tables": [
                {
                    "schema": "bdcarto",
                    "native_name": "limite_administrative",
                    "attributes": "*",
                    "filter" : "genre = 'Limite de département'"
                }
            ]
        },
        "15":{
            "srs": "EPSG:3857",
            "extent": "/path/to/geometry.wkt",
            "db": {
                "host": "postgis.ign.fr",
                "port": "5433",
                "database": "geobase",
                "user": "ign",
                "password": "pwd"
            },
            "tables": [
                {
                    "schema": "bdtopo",
                    "native_name": "limite_administrative_simp",
                    "attributes": "nom"
                },
                {
                    "schema": "bdtopo",
                    "native_name": "pai_sante_simp",
                    "final_name": "sante",
                    "attributes": "name",
                    "filter": "urgence = '1'"
                }
            ]
        }
    }

    (end code)

Group: Externals tools

Scripts' execution needs following tools:

    - tippecanoe
    - ogr2ogr
    
=cut
