#!/usr/bin/env perl
# Copyright © (2011) Institut national de l'information
#                    géographique et forestière
#
# Géoportail SAV <geop_services@geoportail.fr>
#
# This software is a computer program whose purpose is to publish geographic
# data using OGC WMS and WMTS protocol.
#
# This software is governed by the CeCILL-C license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-C
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
#
# knowledge of the CeCILL-C license and that you accept its terms.

################################################################################

=begin nd
File: joinCache-s3.pl

Section: JOINCACHE-S3 tool

Synopsis:
    (start code)
    perl joinCache-s3.pl --conf=path
    (end code)

Tool allowing to merge pyramids stored on S3 object system, using the same TMS. Merge method (if an image is present in several source pyramids) can be :
    - replace : only the top pyramid's image is kept
    - multiply : samples are multiplied
    - alphatop : alpha blending method
    - top : like replace, but more clever (we can avoid to remove data with nodata thanks to the masks)

(see joinCache_general.png)

Source pyramids could have different :
    - compression
    - number of samples per pixel

Source pyramids must have the same :
    - TMS
    - directory depth
    - sample format (unsigned 8-bit integer)
    - number of bits per sample
=cut

################################################################################

use warnings;
use strict;

use POSIX qw(locale_h);

use Getopt::Long;

use Data::Dumper;
local $Data::Dumper::Maxdepth = 2;
use Math::BigFloat;
use File::Basename;
use File::Spec;
use File::Path;
use Cwd;

use Log::Log4perl qw(:easy);

# My search module
use FindBin qw($Bin);
use lib "$Bin/../lib/perl5";

# My module
use COMMON::TileMatrixSet;
use COMMON::TileMatrix;
use COMMON::PyramidRaster;
use COMMON::LevelRaster;
use COMMON::ShellCommandsRaster;
use COMMON::Script;

use JOINCACHE::Node;
use JOINCACHE::PropertiesLoader;


################################################################################
# Constantes
use constant TRUE  => 1;
use constant FALSE => 0;

################################################################################
# Pas de bufferisation des sorties.
$|=1;

####################################################################################################
#                                       Group: Variables                                           #
####################################################################################################

# Variable: version
my $VERSION = '@VERSION_TEXT@';

=begin nd
Variable: options

Contains joinCache call options :

    version - To obtain the command's version
    help - To obtain the command's help
    usage - To obtain the command's usage
    properties - Configuration file
=cut
my %options =
(
    "version" => 0,
    "help" => 0,
    "usage" => 0,

    # Configuration
    "properties" => undef, # file properties params (mandatory) !
);

=begin nd
Variable: this

Informations are treated, interpreted and store in this hash, using JOINCACHE classes :

    propertiesLoader - <JOINCACHE::PropertiesLoader> - Contains all raw informations
    pyramid - <COMMON::PyramidRaster> - Output pyramid
    commands - <COMMON::ShellCommandsRaster> - Commands to configure and use to generate slabs to merge
    mergeMethod - string - Method to use merge slabs when several sources
    scripts - <COMMON::Script> array - Split scripts to use to generate slabs to merge
    currentScript - integer - Script index to use for the next task (round robin share)
    composition - hash - Defines source pyramids for each level, extent, and order
|       level_id => [
|           { extent => OGR::Geometry, bboxes => [[bbox1], [bbox2]] pyr => COMMON::PyramidRaster}
|           { extent => OGR::Geometry, bboxes => [[bbox1], [bbox2]] pyr => COMMON::PyramidRaster}
|       ]
    listStream - file stream - Open file stream to write the new pyramid list
    doneSlabs - boolean hash - To memorize already done tiles, we use this hash, containing "I_J => TRUE".
=cut
my %this =
(
    propertiesLoader => undef,

    pyramid => undef,

    commands => undef,
    mergeMethod => undef,
    scripts => [],
    currentScript => undef,

    composition => undef,

    listStream => undef,

    doneSlabs => {}
);

####################################################################################################
#                                         Group: Functions                                         #
####################################################################################################

=begin nd
Function: main

Main method.

See Also:
    <init>, <config>, <validate>, <doIt>
=cut
sub main {
    printf("JOINCACHE : version [%s]\n",$VERSION);

    print STDOUT "BEGIN\n";

    # initialization
    ALWAYS("> Initialization");
    if (! main::init()) {
        print STDERR "ERROR INITIALIZATION !\n";
        exit 1;
    }

    # configuration
    ALWAYS("> Configuration");
    if (! main::config()) {
        print STDERR "ERROR CONFIGURATION !\n";
        exit 2;
    }

    # execution
    ALWAYS("> Validation");
    if (! main::validate()) {
        print STDERR "ERROR VALIDATION !\n";
        exit 3;
    }

    # execution
    ALWAYS("> Execution");
    if (! main::doIt()) {
        print STDERR "ERROR EXECUTION !\n";
        exit 5;
    }

    print STDOUT "END\n";
}

=begin nd
Function: init

Checks options and initializes the default logger. Check properties file (mandatory).
=cut
sub init {

    ALWAYS(">>> Check Configuration ...");

    # init Getopt
    local $ENV{POSIXLY_CORRECT} = 1;

    Getopt::Long::config qw(
        default
        no_autoabbrev
        no_getopt_compat
        require_order
        bundling
        no_ignorecase
        permute
    );

    # init Options
    GetOptions(
        "help|h" => sub {
            printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/joinCache-pl.html\n" ;
            exit 0;
        },
        "version|v" => sub { exit 0; },
        "usage" => sub {
            printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/joinCache-pl.html\n" ;
            exit 0;
        },
        
        "properties|conf=s" => \$options{properties},     
    ) or do {
        printf "Unappropriate usage\n";
        printf "See documentation here: http://www.rok4.org/data/doc/pyramide/Html/files/bin/joinCache-pl.html\n";
        exit -1;
    };
  
    # logger by default at runtime
    Log::Log4perl->easy_init({
        level => "WARN",
        layout => '%5p : %m (%M) %n'
    });

    # We make path absolute

    # properties : mandatory !
    if (! defined $options{properties} || $options{properties} eq "") {
        FATAL("Option 'properties' not defined !");
        return FALSE;
    }
    my $fproperties = File::Spec->rel2abs($options{properties});
    $options{properties} = $fproperties;

    return TRUE;
}

=begin nd
Function: config

Load all parameters from the configuration file, using <JOINCACHE::PropertiesLoader>.

See Also:
    <checkParams>
=cut
sub config {

    ALWAYS(">>> Load Properties ...");

    my $objProp = JOINCACHE::PropertiesLoader->new($options{properties});
    
    if (! defined $objProp) {
        FATAL("Can not load specific properties !");
        return FALSE;
    }

    $this{propertiesLoader} = $objProp;

    ###################

    my $logger = $this{propertiesLoader}->getLoggerSection();
    
    # logger
    if (defined $logger) {
        my @args;

        my $layout= '%5p : %m (%M) %n';
        my $level = $logger->{log_level};

        my $out   = "STDOUT";
        $level = "WARN"   if (! defined $level);

        if ($level =~ /(ALL|DEBUG)/) {
            $layout = '%5p : %m (%M) %n';
        }

        # add the param logger by default (user settings !)
        push @args, {
            file   => $out,
            level  => $level,
            layout => $layout,
        };

        Log::Log4perl->easy_init(@args);
    }

    # Environment variables

    if (! COMMON::ProxyStorage::checkEnvironmentVariables("S3")) {
        ERROR("Environment variable is missing for a S3 storage");
        return FALSE;
    }

    return TRUE;
}

####################################################################################################
#                                 Group: Validation methods                                        #
####################################################################################################

=begin nd
Function: validate

Validates all components, checks consistency and create scripts. Use classes <COMMON::PyramidRaster>, <COMMON::Script> and <COMMON::ShellCommandsRaster>.

See Also:
    <validateSourcePyramids>
=cut
sub validate {

    ##################

    ALWAYS(">>> Create the output COMMON::PyramidRaster object ...");

    my $pyramidSection = $this{propertiesLoader}->getPyramidSection();

    my $objPyramid = COMMON::PyramidRaster->new("VALUES", $pyramidSection);

    if (! defined $objPyramid) {
        ERROR ("Cannot create the COMMON::PyramidRaster object for the output pyramid !");
        return FALSE;
    }

    if ($objPyramid->getStorageType() ne "S3") {
        ERROR ("JoinCache-S3 only handle S3 output pyramid");
        return FALSE;
    }
    
    if (! $objPyramid->bindTileMatrixSet($pyramidSection->{tms_path})) {
        ERROR("Cannot bind TMS to output pyramid");
        return FALSE;
    }

    $this{pyramid} = $objPyramid;

    ################## Process

    ALWAYS(">>> Create the COMMON::Script objects ...");

    my $processSection = $this{propertiesLoader}->getProcessSection();

    $this{mergeMethod} = $processSection->{merge_method};

    $this{commands} = COMMON::ShellCommandsRaster->new($this{pyramid}, $processSection->{use_masks}, $this{mergeMethod});
    if (! defined $this{commands}) {
        ERROR ("Can not load Commands !");
        return FALSE;
    }

    my $configuredFunctions = $this{commands}->getConfiguredFunctions();

    for (my $i = 1; $i <= $processSection->{job_number}; $i++ ) {
        my $script = COMMON::Script->new({
            id => "SCRIPT_$i",
            tempDir => $processSection->{path_temp},
            commonTempDir => $processSection->{path_temp_common},
            scriptDir => $processSection->{path_shell},
            executedAlone => FALSE
        });

        if (! defined $script) {
            ERROR ("Cannot create the COMMON::Script object !");
            return FALSE;
        }

        $script->prepare($this{pyramid}, $configuredFunctions);

        push(@{$this{scripts}}, $script);
    }
    $this{currentScript} = 0;

    ##################

    ALWAYS(">>> Validate source pyramids ...");

    if (! main::validateSourcePyramids($pyramidSection->{tms_path})) {
        ERROR ("Some source pyramids are not valid !");
        return FALSE;
    }

    ##################

    $this{composition} = $this{propertiesLoader}->getCompositionSection();

    ##################

    # configuration has been loaded and controlled (informations have been stored in %this)
    undef $this{propertiesLoader};

    return TRUE;

}

=begin nd
Function: validateSourcePyramids

For each source pyramid (<COMMON::PyramidRaster>), we bind the TMS (<COMMON::PyramidRaster::bindTileMatrixSet>) and we check its compatibility with the output pyramid (<COMMON::PyramidRaster::checkCompatibility>)
=cut
sub validateSourcePyramids {
    my $tms_path = shift;

    my $sourcePyramids = $this{propertiesLoader}->getSourcePyramids();

    foreach my $sourcePyramid (values %{$sourcePyramids}) {

        if (! $sourcePyramid->bindTileMatrixSet($tms_path)) {
            ERROR("Cannot bind TMS to source pyramid " . $sourcePyramid->getName());
            return FALSE;
        }

        if ($sourcePyramid->checkCompatibility($this{pyramid}) == 0) {
            ERROR (sprintf "Source pyramid (%s) and output pyramid are not compatible", $sourcePyramid->getName());
            return FALSE;
        }
    }

    return TRUE;
}

####################################################################################################
#                                 Group: Process methods                                           #
####################################################################################################

=begin nd
Function: doIt

We browse all source pyramids to identify images to generate. 

For each level, for each source pyramid :
    - Identify present images (in the wanted bounding box : <tileToImage>)
    - Work has already been made ? Next
    - Else search it in the other source pyramids with an lower priority : <searchImage>
    - Treat source(s) : <main::treatNode>

=cut
sub doIt {

    ALWAYS(">>> Browse source pyramids");

    my $pyramid = $this{pyramid};
    my $TPW = $pyramid->getTilesPerWidth();
    my $TPH = $pyramid->getTilesPerHeight();
    my $TMS = $pyramid->getTileMatrixSet();

    my $listFile = $pyramid->getListFile();
    my $dir = File::Basename::dirname($listFile);

    if (! -d $dir) {
        eval { mkpath([$dir]); };
        if ($@) {
            ERROR(sprintf "Can not create the output pyramid list directory '%s' : %s !", $dir , $@);
            return FALSE;
        }
    }

    my $STREAM;
    if (! open $STREAM, ">", $listFile) {
        ERROR(sprintf "Cannot open output pyramid list file (write) : %s",$listFile);
        return FALSE;
    }
    $this{listStream} = $STREAM;

    printf $STREAM "0=%s\n#\n", $pyramid->getDataBucket();

    while( my ($level,$sources) = each(%{$this{composition}}) ) {
        INFO(sprintf "Level %s",$level);

        if (! $pyramid->addLevel($level)) {
            ERROR("Cannot add level $level to output pyramid");
            return FALSE;
        }

        my $tm = $pyramid->getTileMatrixSet()->getTileMatrix($level);

        my $nSource = 0;
        foreach my $source (@{$sources}) {

            # On récupère le niveau concerné dans la pyramide source en cours de traitement

            foreach my $bb (@{$source->{bboxes}}) {

                my ($ROWMIN, $ROWMAX, $COLMIN, $COLMAX) = $pyramid->getLevel($level)->bboxToSlabIndices(@{$bb});

                DEBUG("Slabs' extrem indices : ROWS: $ROWMIN -> $ROWMAX, COLS: $COLMIN -> $COLMAX");

                for (my $COL = $COLMIN; $COL <= $COLMAX; $COL++) {
                    for (my $ROW = $ROWMIN; $ROW <= $ROWMAX; $ROW++) {

                        my $slabKey = $COL."_".$ROW;

                        if (exists $this{doneSlabs}->{$slabKey}) {
                            # Image already treated
                            next;
                        }

                        my $node = JOINCACHE::Node->new({
                            level => $level,
                            col => $COL,
                            row => $ROW,
                            sourcePyramids => $sources,
                            mainSourceIndice => $nSource,
                            useMasks => $this{commands}->useMasks(),
                            mergeMethod => $this{mergeMethod}
                        });
                        if (! defined $node) {
                            ERROR(sprintf "Cannot create the node %s,%s", $COL, $ROW);
                            return FALSE;
                        }

                        if ($node->getSourcesNumber() == 0) {
                            # Pas de source pour cette image, pour cette priorité
                            next;
                        }

                        if (! main::treatNode($node)) {
                            ERROR(sprintf "Cannot generate the node %s", Dumper($node));
                            return FALSE;
                        }

                        $pyramid->getLevel($level)->updateLimitsFromSlab($COL, $ROW);
                        $this{doneSlabs}->{$slabKey} = TRUE;
                    }
                }
            }
            $nSource++;
        }

        delete $this{doneSlabs};
    }

    close($STREAM);

    $this{pyramid}->backupList();

    # On ferme tous les scripts
    foreach my $s (@{$this{scripts}}) {
        $s->close();
    }

    # writting pyramid's configuration file
    ALWAYS(">>> Write pyramid's descriptor");
    if (! $this{pyramid}->writeDescriptor()) {
        ERROR("Can not write Pyramid file !");
        return FALSE;
    }

    return TRUE;
}

sub treatNode {
    my $node = shift;

    my $finalImage = $this{pyramid}->getLevel($node->getLevel())->getSlabPath("IMAGE", $node->getColumn(), $node->getRow(), TRUE);

    my $finalMask = undef;
    if ($this{pyramid}->ownMasks()) {
        $finalMask = $this{pyramid}->getLevel($node->getLevel())->getSlabPath("MASK", $node->getColumn(), $node->getRow(), TRUE);
    }

    # On affecte le script courant au noeud. Le script courant n'est pas incrémenté dans le cas d'un lien, car rien n'est écrit dans le script.
    $node->setScript($this{scripts}->[$this{currentScript}]);

    if ($node->getSourcesNumber() == 1) {

        my $sourceImage = $node->getSource(0);

        if ($this{pyramid}->checkCompatibility($sourceImage->{sourcePyramid}) == 2) {
            # We can just make a symbolic link, no code in a script

            my $aliasedObject = COMMON::ProxyStorage::symLink(
                $sourceImage->{sourcePyramid}->getStorageType(), $sourceImage->{img},
                $this{pyramid}->getStorageType(), $finalImage
            );

            if (! defined $aliasedObject) {
                ERROR(sprintf "The ancestor image slab '%s' cannot be aliased in the new pyramid", $sourceImage->{img});
                return FALSE;
            }

            main::storeInList($aliasedObject);
            
        } else {
            # We have just one source image, but it is not compatible with the final cache
            # We need to transform it.
            if ( ! $this{commands}->overlayNtiff($node, $this{pyramid}) ) {
                ERROR(sprintf "Cannot transform the image");
                return FALSE;
            }

            main::storeInList($finalImage);
            
            $this{currentScript} = ($this{currentScript}+1)%(scalar(@{$this{scripts}}));
        }

        # Export éventuel du masque : il est forcément dans le bon format, on peut donc le lier.
        if (exists $sourceImage->{msk} && defined $finalMask) {
            # We can just make a symbolic link, no code in a script

            my $aliasedObject = COMMON::ProxyStorage::symLink(
                $sourceImage->{sourcePyramid}->getStorageType(), $sourceImage->{msk},
                $this{pyramid}->getStorageType(), $finalMask
            );

            if (! defined $aliasedObject) {
                ERROR(sprintf "The ancestor mask slab '%s' cannot be aliased in the new pyramid", $sourceImage->{msk});
                return FALSE;
            }

            main::storeInList($aliasedObject);
        }
        
    } else {
        # We have several images, we merge them
        if ( ! $this{commands}->overlayNtiff($node, $this{pyramid}) ) {
            ERROR(sprintf "Cannot merge the images");
            return FALSE;
        }
        $this{currentScript} = ($this{currentScript}+1)%(scalar(@{$this{scripts}}));

        main::storeInList($finalImage);

        if (defined $finalMask) {
            main::storeInList($finalMask);
        }
    }

    return TRUE;
}

####################################################################################################
#                                   Group: List methods                                            #
####################################################################################################

=begin nd
Function: storeInList

Writes slab's path in the pyramid's content list and store the root.

Parameters:
    slabPathEnd - string - End of the slab path (without root).
    slabPath - string - Full slab path, to store in the file list (with indexed root).
=cut
sub storeInList {
    my $slabPath = shift;

    my $bucketName = $this{pyramid}->getDataBucket();
    $slabPath =~ s/$bucketName/0/;

    my $STREAM = $this{listStream};
    print $STREAM "$slabPath\n";
}

################################################################################

BEGIN {}
INIT {}

main;
exit 0;

END {}

################################################################################

1;
__END__

=begin nd
Section: Details

Group: Command's options

    --help - Display the link to the technic documentation.

    --usage - Display the link to the technic documentation.

    --version - Display the tool version.

    --conf=path - Path to configuration file of the pyramid. This option is mandatory.

Group: Mandatory environment variable

    ROK4_S3_URL
    ROK4_S3_KEY
    ROK4_S3_SECRETKEY

Group: Write a configuration file

A file configuration can be composed of sections and parameters following :

    (start code)
    [ section ]
    parameter = value ; comments
    ;comments
    (end code)

Group: JOINCACHE global configuration file

Properties by section.

Topic: logger

    log_level - Define importance level from which we print messages. From less to more important : DEBUG - INFO - WARN - ERROR - ALWAYS (WARN by default).

Example:
    (start code)
    [ logger ]
    log_level = INFO
    (end code)

Topic: pyramid

For more informations about properties, see <BE4::Pyramid>.

    pyr_name_new - Name of the new pyramid, used to name the descriptor, the pyramid's list, the data directory and the temporary directory.
    pyr_data_path - Directory path, where to write the cache. Mandatory.
    pyr_desc_path - Directory path, where to write the descriptor. Mandatory.

    compression - Possible values : raw, jpg, zip, lzw, png, pkb. PNG compression is not an official compression for tiff format (just readable by rok4). Default : raw.

    color - The color is a string and contain on value per sample, in decimal format, seperated by comma. For 8 bits unsigned integer, value must be between 0 and 255. Example : "255,255,255" (white).

    image_width, image_height - Number a tile in the cache image, widthwise and heightwise. 16 * 16 for example. Mandatory. Have to be the same in the source pyramids.

    bitspersample - Possible values : 8, 32. Have to be the same as source. Mandatory.

    sampleformat - Possible values : uint, float. Have to be the same as source. Mandatory.

    samplesperpixel - Possible values : 1, 3, 4. Have to be the same as source. Mandatory.

    photometric - Possible values : gray, rgb. Have to be consistent with the samples per pixel. 1 -> gray and 3,4 -> rgb. Default : rgb.

    dir_depth - Image's depth from the level directory. depth = 2 => /.../LevelID/SUB1/SUB2/IMG.tif. Mandatory. Have to be the same in the source pyramids.

    export_masks - An option is used to precise if we want to write masks in the final pyramid. So we can use masks but not export them (they may be useless for a pyramid which wont be never updated). Only values "true" and "TRUE" lead to masks' export. Optionnal, FALSE by default.

    tms_name - TMS file name, with extension *.tms*. Mandatory. Have to be the same in the source pyramids.

    tms_path - Directory, where to find the TMS file. Mandatory

Examples:
    (start code)
    [ pyramid ]
    pyr_data_path = /home/IGN/PYRAMIDS
    pyr_desc_path = /home/IGN/DESCRIPTOR
    pyr_name_new = JOINED_PYRAMID

    tms_name = LAMB93_10cm.tms
    tms_path = /home/IGN/TMS

    dir_depth = 2
    image_width = 16
    image_height = 16

    export_masks = TRUE

    compression         = png
    bitspersample       = 8
    sampleformat        = uint
    photometric         = rgb
    samplesperpixel     = 3
    interpolation       = bicubic

    color               = 255,0,0 ; red as final nodata color
    (end code)

Topic: process

    job_number - Level of parallelization for scripts.

    path_temp - Temporary directory path proper to each script : temporary files are written in *path_temp/pyr_name_new/SCRIPT_ID*. Mandatory.

    path_temp_common - Common temporary directory path : temporary files which have to be shared between several scripts are written in *path_temp_common/pyr_name_new/COMMON*. Mandatory.

    path_shell - Directory path, to write scripts in. Scripts are named in like manner for all generation. That's why the path_shell must be specific to the generation (contains the name of the pyramid for example). Mandatory.

    merge_method - Way to merge several source pyramid's images. Possible values are : alphatop, replace, multiply, top. See details in <JOINCACHE::Process>.

    use_masks - Precise if we want to use masks. Make heavier genrations. Optionnal, FALSE if not provided.

Example:
    (start code)
    [ process ]
    merge_method = alphatop
    path_temp = /tmp/PRIVATE/
    path_temp_common = /tmp/COMMON/
    path_shell  = /home/IGN/SCRIPT/ORTHO
    job_number = 16
    use_masks = TRUE
    (end code)

Topic: extents

We define several extents (bouding boxes or a file with WKT geometry) and we attribute them an identifiant. This identifiatn will be used in the *composition* section to precise the extent where the source pyramid is used. If we use an undefined identifiant, an error will occure.

Format : ID = xmin,ymin,xmax,ymax , ID is a basic string, without space and coordinates are in the TMS' SRS.

Example:
    (start code)
    [ extents ]
    PARIS = 640000,6858000,658000,6867000
    FXX = /home/IGN/fxx.wkt
    (end code)
    
Topic: composition

We say : "For this level, for this extent, I want to use images present in this source images' pyramid"

Format : LevelID.BboxId = pyrPath1,pyrPath2 , BboxId have to be defined in *extents* section, LevelId have to be present in the TMS and in used pyramids.

Order in 'composition' is important, a triplet will take precedence over the next triplets for a same level. We define priority like this.

Example:
    (start code)
    [ composition ]
    16.PARIS = /home/IGN/PYRAMIDS/PARCEL_PNG_LAMB93_D075-O.pyr,/home/IGN/PYRAMIDS/ORTHO_RAW_LAMB93_D075-O.pyr

    19.PARIS = /home/IGN/PYRAMIDS/PARCEL_PNG_LAMB93_D075-O.pyr
    19.PARIS = /home/IGN/PYRAMIDS/ORTHO_RAW_LAMB93_D075-O.pyr
    (end code)

Group: Paths in brief

    - Descriptor file : *pyr_desc_path/pyr_name.pyr*
    - List file: *pyr_desc_path/pyr_name.list*
    - TMS file: *tms_path/tms_name*
    - Scripts: *path_shell/SCRIPT_X.sh*
    - Temporary directory: *path_temp/pyr_name_new/SCRIPT_X*
    - Common temporary directory: *path_temp_common/pyr_name_new/COMMON*

=cut
